name: Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-tests:
    name: Comprehensive Security Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety pytest-html pytest-cov
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run comprehensive security tests
      run: |
        python scripts/run_security_tests.py --verbose --fail-on-critical --generate-reports
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Upload security test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-reports-${{ matrix.python-version }}
        path: |
          reports/
          *.xml
          *.html
          *.json
        retention-days: 30
        
    - name: Run static security analysis
      run: |
        # Run bandit for Python security analysis
        bandit -r backend/ -f json -o reports/bandit_results.json || true
        
        # Run safety for dependency scanning
        safety check --json --output reports/safety_results.json || true
        
    - name: Upload static analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-reports-${{ matrix.python-version }}
        path: reports/*.json
        retention-days: 30
        
    - name: Check for critical security issues
      run: |
        # Check bandit results for high severity issues
        if [ -f reports/bandit_results.json ]; then
          HIGH_ISSUES=$(python -c "
          import json
          with open('reports/bandit_results.json') as f:
              data = json.load(f)
          high_issues = [i for i in data.get('results', []) if i.get('issue_severity') == 'HIGH']
          print(len(high_issues))
          ")
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "‚ùå Found $HIGH_ISSUES high severity security issues in code"
            exit 1
          fi
        fi
        
        # Check safety results for high severity vulnerabilities
        if [ -f reports/safety_results.json ]; then
          HIGH_VULNS=$(python -c "
          import json
          with open('reports/safety_results.json') as f:
              data = json.load(f)
          high_vulns = [v for v in data.get('vulnerabilities', []) if v.get('severity') == 'HIGH']
          print(len(high_vulns))
          ")
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå Found $HIGH_VULNS high severity dependency vulnerabilities"
            exit 1
          fi
        fi
        
    - name: Generate security test summary
      if: always()
      run: |
        echo "## Security Test Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f reports/security_test_summary.json ]; then
          python -c "
          import json
          with open('reports/security_test_summary.json') as f:
              data = json.load(f)
          summary = data['summary']
          print(f'- **Total Tests:** {summary[\"total_tests\"]}')
          print(f'- **Passed:** {summary[\"passed_tests\"]}')
          print(f'- **Failed:** {summary[\"failed_tests\"]}')
          print(f'- **Critical Failures:** {len(summary[\"critical_failures\"])}')
          " >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå No security test summary found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = `## üîí Security Test Results for Python ${{ matrix.python-version }}\n\n`;
          
          try {
            const summary = JSON.parse(fs.readFileSync('reports/security_test_summary.json', 'utf8'));
            const testResults = summary.test_results;
            
            comment += `### Test Summary\n`;
            comment += `- **Total Tests:** ${summary.summary.total_tests}\n`;
            comment += `- **Passed:** ${summary.summary.passed_tests}\n`;
            comment += `- **Failed:** ${summary.summary.failed_tests}\n`;
            comment += `- **Critical Failures:** ${summary.summary.critical_failures.length}\n\n`;
            
            comment += `### Detailed Results\n`;
            for (const [testType, result] of Object.entries(testResults)) {
              const status = result.success ? '‚úÖ PASSED' : '‚ùå FAILED';
              comment += `- **${testType.replace(/_/g, ' ').toUpperCase()}:** ${status}\n`;
            }
            
            if (summary.summary.critical_failures.length > 0) {
              comment += `\n### ‚ö†Ô∏è Critical Failures\n`;
              summary.summary.critical_failures.forEach(failure => {
                comment += `- ${failure}\n`;
              });
            }
            
          } catch (error) {
            comment += `‚ùå Failed to read security test results: ${error.message}\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: security-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Download security test artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-test-reports-3.11
        path: reports/
        
    - name: Generate compliance report
      run: |
        python scripts/generate_compliance_report.py
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: reports/compliance_report.html
        retention-days: 90
        
    - name: Check compliance status
      run: |
        if [ -f reports/compliance_status.json ]; then
          COMPLIANT=$(python -c "
          import json
          with open('reports/compliance_status.json') as f:
              data = json.load(f)
          print('true' if data.get('compliant', False) else 'false')
          ")
          
          if [ "$COMPLIANT" != "true" ]; then
            echo "‚ùå Security compliance check failed"
            exit 1
          else
            echo "‚úÖ Security compliance check passed"
          fi
        else
          echo "‚ùå No compliance status file found"
          exit 1
        fi

  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-tests, security-compliance]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-reports/
        
    - name: Send security notification
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let notification = `## üö® Security Test Failures Detected\n\n`;
          notification += `Security tests have failed in the latest run. Please review the following:\n\n`;
          notification += `- [Security Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          notification += `- [Compliance Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
          notification += `**Branch:** ${{ github.ref }}\n`;
          notification += `**Commit:** ${{ github.sha }}\n`;
          notification += `**Triggered by:** ${{ github.event_name }}\n\n`;
          notification += `Please address any security issues before proceeding with deployment.`;
          
          // Create an issue for security failures
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Security Test Failures - ${{ github.ref_name }}`,
            body: notification,
            labels: ['security', 'high-priority', 'ci-failure']
          });
          
    - name: Send success notification
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let notification = `## ‚úÖ Security Tests Passed\n\n`;
          notification += `All security tests have passed successfully!\n\n`;
          notification += `- [Security Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          notification += `- [Compliance Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
          notification += `**Branch:** ${{ github.ref }}\n`;
          notification += `**Commit:** ${{ github.sha }}\n`;
          notification += `**Triggered by:** ${{ github.event_name }}\n\n`;
          notification += `The codebase is ready for deployment.`;
          
          // Add a comment to the commit
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: notification
          });
