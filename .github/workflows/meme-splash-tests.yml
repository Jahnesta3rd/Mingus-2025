name: Meme Splash Page Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/src/components/MemeSplashPage.tsx'
      - 'backend/api/meme_endpoints.py'
      - 'meme_selector.py'
      - 'tests/meme_splash/**'
      - '.github/workflows/meme-splash-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/src/components/MemeSplashPage.tsx'
      - 'backend/api/meme_endpoints.py'
      - 'meme_selector.py'
      - 'tests/meme_splash/**'
      - '.github/workflows/meme-splash-tests.yml'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  FLASK_ENV: 'testing'

jobs:
  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-testing\ 2.txt
        pip install pytest pytest-cov pytest-html pytest-xdist
        pip install flask sqlite3
        
    - name: Run backend unit tests
      run: |
        cd tests/meme_splash
        python -m pytest test_meme_selector_unit.py -v --cov=../../../meme_selector --cov-report=html --cov-report=xml --html=report.html --self-contained-html
        
    - name: Run API endpoint tests
      run: |
        cd tests/meme_splash
        python -m pytest test_meme_api_endpoints.py -v --cov=../../../backend/api/meme_endpoints --cov-report=html --cov-report=xml --html=api_report.html --self-contained-html
        
    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          tests/meme_splash/report.html
          tests/meme_splash/api_report.html
          tests/meme_splash/htmlcov/
          tests/meme_splash/coverage.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: tests/meme_splash/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Component Tests
  frontend-component-tests:
    name: Frontend Component Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install testing dependencies
      run: |
        cd frontend
        npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom
        
    - name: Run frontend component tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testPathPattern=MemeSplashPage.test.tsx
        
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/jest-results.xml

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-component-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-testing\ 2.txt
        pip install flask sqlite3
        
    - name: Run integration tests
      run: |
        cd tests/meme_splash/integration
        python -m pytest test_full_user_flow.py -v --html=integration_report.html --self-contained-html
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: tests/meme_splash/integration/integration_report.html

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-testing\ 2.txt
        pip install psutil flask sqlite3
        
    - name: Run performance tests
      run: |
        cd tests/meme_splash/performance
        python -m pytest test_meme_performance.py -v --html=performance_report.html --self-contained-html -s
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: tests/meme_splash/performance/performance_report.html

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
    - name: Run security scan
      run: |
        bandit -r backend/ meme_selector.py -f json -o security_report.json || true
        safety check --json --output safety_report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security_report.json
          safety_report.json

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-component-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npm install --save-dev @testing-library/jest-axe jest-axe
        
    - name: Run accessibility tests
      run: |
        cd frontend
        npm test -- --testNamePattern="accessibility" --coverage --watchAll=false
        
    - name: Upload accessibility test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-test-results
        path: frontend/coverage/

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-component-tests, integration-tests, performance-tests, security-tests, accessibility-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# Meme Splash Page Test Results" > test_summary.md
        echo "" >> test_summary.md
        echo "## Test Status" >> test_summary.md
        echo "- Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> test_summary.md
        echo "- Frontend Component Tests: ${{ needs.frontend-component-tests.result }}" >> test_summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test_summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test_summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test_summary.md
        echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Artifacts" >> test_summary.md
        echo "- Backend test reports and coverage" >> test_summary.md
        echo "- Frontend test reports and coverage" >> test_summary.md
        echo "- Integration test reports" >> test_summary.md
        echo "- Performance test reports" >> test_summary.md
        echo "- Security scan reports" >> test_summary.md
        echo "- Accessibility test reports" >> test_summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test_summary.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && needs.test-summary.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: docker build, kubectl apply, etc.
        
    - name: Notify deployment
      run: |
        echo "Deployment to staging completed successfully!"
