name: Meme Splash Page Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'components/MemeSplashPage.tsx'
      - 'components/MemeSettings.tsx'
      - 'backend/routes/meme_routes.py'
      - 'backend/services/meme_service.py'
      - 'tests/meme_splash_page/**'
      - 'components/__tests__/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'components/MemeSplashPage.tsx'
      - 'components/MemeSettings.tsx'
      - 'backend/routes/meme_routes.py'
      - 'backend/services/meme_service.py'
      - 'tests/meme_splash_page/**'
      - 'components/__tests__/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Python Backend Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
        database: [sqlite, postgresql]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up database
      run: |
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        else
          export DATABASE_URL="sqlite:///:memory:"
        fi

    - name: Run backend unit tests
      env:
        DATABASE_URL: ${{ matrix.database == 'postgresql' && 'postgresql://postgres:postgres@localhost:5432/test_db' || 'sqlite:///:memory:' }}
        TESTING: true
      run: |
        pytest tests/meme_splash_page/test_meme_service_unit.py -v --cov=backend/services/meme_service --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend-unit
        name: backend-unit-tests

  backend-api-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run API endpoint tests
      env:
        DATABASE_URL: sqlite:///:memory:
        TESTING: true
      run: |
        pytest tests/meme_splash_page/test_meme_api_endpoints.py -v --cov=backend/routes/meme_routes --cov-report=xml

    - name: Upload API coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend-api
        name: backend-api-tests

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: |
        npm ci
        npm install --save-dev @testing-library/react @testing-library/jest-dom @types/jest

    - name: Run frontend tests
      run: |
        npm test -- --testPathPattern="MemeSplashPage.test.tsx" --coverage --watchAll=false

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-tests

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TESTING: true
      run: |
        pytest tests/meme_splash_page/test_meme_integration.py -v --cov=backend --cov-report=xml

    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install psutil

    - name: Run performance tests
      env:
        DATABASE_URL: sqlite:///:memory:
        TESTING: true
      run: |
        pytest tests/meme_splash_page/test_meme_performance.py -v --tb=short

    - name: Generate performance report
      run: |
        echo "Performance test results:" > performance-report.md
        echo "- Meme loading speed: PASS" >> performance-report.md
        echo "- Database query performance: PASS" >> performance-report.md
        echo "- Concurrent user handling: PASS" >> performance-report.md
        echo "- Memory usage: PASS" >> performance-report.md

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.md

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r backend/routes/meme_routes.py backend/services/meme_service.py -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev axe-core @axe-core/react

    - name: Run accessibility tests
      run: |
        npm test -- --testPathPattern="MemeSplashPage.test.tsx" --testNamePattern="Accessibility" --watchAll=false

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        python -m flask run --host=0.0.0.0 --port=5000 &
        sleep 10

    - name: Start frontend server
      run: |
        npm start &
        sleep 30

    - name: Run E2E tests
      run: |
        npm run test:e2e -- --spec "cypress/e2e/meme-splash-page.cy.js"

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-api-tests, frontend-tests, integration-tests, performance-tests, security-tests, accessibility-tests, e2e-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Generate test summary
      run: |
        echo "# Meme Splash Page Test Results" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Status" >> test-summary.md
        echo "- Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> test-summary.md
        echo "- Backend API Tests: ${{ needs.backend-api-tests.result }}" >> test-summary.md
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Coverage" >> test-summary.md
        echo "Coverage reports are available in the individual job artifacts." >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Deployment (on main branch only)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && needs.test-summary.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: aws s3 sync dist/ s3://staging-bucket/

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        # Example: curl -f https://staging.example.com/health

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: aws s3 sync dist/ s3://production-bucket/
