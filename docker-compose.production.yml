version: '3.8'

services:
  # MINGUS Application
  mingus-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mingus-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://mingus:${POSTGRES_PASSWORD}@postgres:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_ARTICLE_LIBRARY=true
      - ENABLE_AI_RECOMMENDATIONS=true
      - ENABLE_CULTURAL_PERSONALIZATION=true
      - ENABLE_ADVANCED_SEARCH=true
      - ENABLE_ANALYTICS=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLASK_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mingus_data:/app/data
      - mingus_logs:/app/logs
      - mingus_cache:/app/cache
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mingus-celery-worker
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://mingus:${POSTGRES_PASSWORD}@postgres:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_ARTICLE_LIBRARY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLASK_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mingus_data:/app/data
      - mingus_logs:/app/logs
      - mingus_cache:/app/cache
    networks:
      - mingus-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mingus-celery-beat
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://mingus:${POSTGRES_PASSWORD}@postgres:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_ARTICLE_LIBRARY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLASK_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mingus_data:/app/data
      - mingus_logs:/app/logs
    networks:
      - mingus-network

  # Flower Monitoring (Optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mingus-flower
    restart: unless-stopped
    command: celery -A backend.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - mingus-network
    profiles:
      - monitoring

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mingus-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mingus
      - POSTGRES_USER=mingus
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mingus -d mingus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: mingus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch (Optional - for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mingus-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mingus-network
    profiles:
      - search

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mingus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - mingus_static:/var/www/static
    depends_on:
      - mingus-app
    networks:
      - mingus-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mingus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mingus-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mingus-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mingus-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  mingus_data:
    driver: local
  mingus_logs:
    driver: local
  mingus_cache:
    driver: local
  mingus_static:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mingus-network:
    driver: bridge
