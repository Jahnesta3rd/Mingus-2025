# =====================================================
# MINGUS APPLICATION - DOCKER COMPOSE
# =====================================================
# Local development environment with all services

version: '3.8'

services:
  # Main Flask application
  app:
    build: .
    container_name: mingus-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://mingus:mingus123@db:5432/mingus_dev
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - SENTRY_DSN=${SENTRY_DSN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    volumes:
      - ./backend:/app/backend
      - ./migrations:/app/migrations
      - ./config:/app/config
      - ./static:/app/static
      - ./templates:/app/templates
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: mingus-db
    environment:
      - POSTGRES_DB=mingus_dev
      - POSTGRES_USER=mingus
      - POSTGRES_PASSWORD=mingus123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mingus -d mingus_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mingus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery worker for background tasks
  celery-worker:
    build: .
    container_name: mingus-celery-worker
    command: celery -A backend.tasks.celery_app worker --loglevel=info
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://mingus:mingus123@db:5432/mingus_dev
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - mingus-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    container_name: mingus-celery-beat
    command: celery -A backend.tasks.celery_app beat --loglevel=info
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://mingus:mingus123@db:5432/mingus_dev
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - mingus-network
    restart: unless-stopped

  # Flower for monitoring Celery tasks
  flower:
    build: .
    container_name: mingus-flower
    command: celery -A backend.tasks.celery_app flower --port=5555
    environment:
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - mingus-network
    restart: unless-stopped

  # Nginx reverse proxy (optional for local development)
  nginx:
    image: nginx:alpine
    container_name: mingus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    networks:
      - mingus-network
    restart: unless-stopped
    profiles:
      - nginx

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: mingus-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=mingus
      - MINIO_ROOT_PASSWORD=mingus123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - minio

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  mingus-network:
    driver: bridge
