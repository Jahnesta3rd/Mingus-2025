version: '3.8'

services:
  # Main Flask Application
  mingus-app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: mingus-app
    ports:
      - "5002:5002"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mingus_user:mingus_password@mingus-db:5432/mingus_db
      - REDIS_URL=redis://mingus-redis:6379/0
      - MONITORING_ENABLED=true
      - ALERTING_ENABLED=true
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      - mingus-db
      - mingus-redis
    restart: unless-stopped
    networks:
      - mingus-network

  # PostgreSQL Database
  mingus-db:
    image: postgres:15-alpine
    container_name: mingus-db
    environment:
      - POSTGRES_DB=mingus_db
      - POSTGRES_USER=mingus_user
      - POSTGRES_PASSWORD=mingus_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mingus-network

  # Redis Cache
  mingus-redis:
    image: redis:7-alpine
    container_name: mingus-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - mingus-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mingus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - mingus-app
    restart: unless-stopped
    networks:
      - mingus-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: mingus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mingus-network

  grafana:
    image: grafana/grafana:latest
    container_name: mingus-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mingus-network

  # Job Queue (Celery)
  celery-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: mingus-celery-worker
    command: celery -A backend.celery_app worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mingus_user:mingus_password@mingus-db:5432/mingus_db
      - REDIS_URL=redis://mingus-redis:6379/0
    volumes:
      - ../logs:/app/logs
    depends_on:
      - mingus-db
      - mingus-redis
    restart: unless-stopped
    networks:
      - mingus-network

  celery-beat:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: mingus-celery-beat
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mingus_user:mingus_password@mingus-db:5432/mingus_db
      - REDIS_URL=redis://mingus-redis:6379/0
    volumes:
      - ../logs:/app/logs
    depends_on:
      - mingus-db
      - mingus-redis
    restart: unless-stopped
    networks:
      - mingus-network

  # Backup Service
  backup-service:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backup
    container_name: mingus-backup
    environment:
      - DATABASE_URL=postgresql://mingus_user:mingus_password@mingus-db:5432/mingus_db
      - BACKUP_S3_BUCKET=mingus-backups
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ../backups:/app/backups
    depends_on:
      - mingus-db
    restart: unless-stopped
    networks:
      - mingus-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mingus-network:
    driver: bridge 