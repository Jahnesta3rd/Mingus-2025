# CI/CD Pipeline for Mingus Application
# This pipeline handles automated testing, building, and deployment

version: 2.1

# Define reusable jobs
jobs:
  # Test job
  test:
    docker:
      - image: python:3.11-slim
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apt-get update
            apt-get install -y postgresql-client redis-tools curl
      - run:
          name: Install Python dependencies
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-mock
      - run:
          name: Run unit tests
          command: |
            pytest tests/unit/ -v --cov=backend --cov-report=xml
      - run:
          name: Run integration tests
          command: |
            pytest tests/integration/ -v
      - run:
          name: Run performance tests
          command: |
            pytest tests/performance/ -v
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  # Security scan job
  security-scan:
    docker:
      - image: python:3.11-slim
    steps:
      - checkout
      - run:
          name: Install security tools
          command: |
            pip install bandit safety
      - run:
          name: Run security scan
          command: |
            bandit -r backend/ -f json -o bandit-report.json
            safety check --json --output safety-report.json
      - store_artifacts:
          path: bandit-report.json
          destination: security-reports
      - store_artifacts:
          path: safety-report.json
          destination: security-reports

  # Build job
  build:
    docker:
      - image: python:3.11-slim
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t mingus-app:$CIRCLE_SHA1 -f deployment/Dockerfile .
            docker tag mingus-app:$CIRCLE_SHA1 mingus-app:latest
      - run:
          name: Push to registry
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push mingus-app:$CIRCLE_SHA1
            docker push mingus-app:latest

  # Deploy to staging
  deploy-staging:
    docker:
      - image: python:3.11-slim
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Deploy to staging
          command: |
            aws eks update-kubeconfig --name mingus-staging --region us-east-1
            kubectl set image deployment/mingus-app mingus-app=mingus-app:$CIRCLE_SHA1
            kubectl rollout status deployment/mingus-app
      - run:
          name: Run smoke tests
          command: |
            sleep 30
            curl -f https://staging.mingus.com/health || exit 1

  # Deploy to production
  deploy-production:
    docker:
      - image: python:3.11-slim
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Deploy to production
          command: |
            aws eks update-kubeconfig --name mingus-production --region us-east-1
            kubectl set image deployment/mingus-app mingus-app=mingus-app:$CIRCLE_SHA1
            kubectl rollout status deployment/mingus-app
      - run:
          name: Run health checks
          command: |
            sleep 60
            curl -f https://mingus.com/health || exit 1
            curl -f https://mingus.com/api/health/checkin || exit 1

# Define workflows
workflows:
  version: 2
  
  # Development workflow
  development:
    jobs:
      - test:
          filters:
            branches:
              only: develop
      - security-scan:
          filters:
            branches:
              only: develop
      - build:
          requires:
            - test
            - security-scan
          filters:
            branches:
              only: develop
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: develop

  # Production workflow
  production:
    jobs:
      - test:
          filters:
            branches:
              only: main
      - security-scan:
          filters:
            branches:
              only: main
      - build:
          requires:
            - test
            - security-scan
          filters:
            branches:
              only: main
      - hold-production:
          type: approval
          requires:
            - build
          filters:
            branches:
              only: main
      - deploy-production:
          requires:
            - hold-production
          filters:
            branches:
              only: main

  # Feature branch workflow
  feature:
    jobs:
      - test:
          filters:
            branches:
              ignore: main
              ignore: develop
      - security-scan:
          filters:
            branches:
              ignore: main
              ignore: develop

# Environment variables
environment:
  # Docker registry
  DOCKER_USERNAME: $DOCKER_USERNAME
  DOCKER_PASSWORD: $DOCKER_PASSWORD
  
  # AWS credentials
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  
  # Database credentials
  DATABASE_URL: $DATABASE_URL
  REDIS_URL: $REDIS_URL
  
  # Application settings
  FLASK_ENV: production
  MONITORING_ENABLED: true
  ALERTING_ENABLED: true 