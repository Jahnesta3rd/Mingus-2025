# Makefile for Accessibility Testing
# Usage: make -f Makefile.testing <target>

.PHONY: help install test test-local test-docker test-ci test-report test-watch test-clean test-setup

# Default target
help:
	@echo "Accessibility Testing Commands:"
	@echo "  install        - Install testing dependencies"
	@echo "  test           - Run all accessibility tests"
	@echo "  test-local     - Run tests against local services"
	@echo "  test-docker    - Run tests using Docker containers"
	@echo "  test-ci        - Run tests in CI/CD mode"
	@echo "  test-report    - Generate accessibility report"
	@echo "  test-watch     - Run tests in watch mode"
	@echo "  test-clean     - Clean test artifacts"
	@echo "  test-setup     - Setup testing environment"

# Install testing dependencies
install:
	@echo "Installing testing dependencies..."
	pip install -r requirements-testing.txt
	@echo "✅ Dependencies installed"

# Run all accessibility tests
test: test-setup
	@echo "Running accessibility tests..."
	python -m pytest tests/test_accessibility.py -v --tb=short
	@echo "✅ Tests completed"

# Run tests against local services
test-local: test-setup
	@echo "Starting local services for testing..."
	@echo "Make sure Flask (port 5000) and React (port 3000) are running"
	python -m pytest tests/test_accessibility.py -v --tb=short \
		--base-url=http://localhost:5000
	@echo "✅ Local tests completed"

# Run tests using Docker containers
test-docker: test-setup
	@echo "Starting Docker testing environment..."
	docker-compose -f docker-compose.testing.yml up -d
	@echo "Waiting for services to be ready..."
	sleep 60
	@echo "Running accessibility tests..."
	docker-compose -f docker-compose.testing.yml exec accessibility-tester \
		python -m pytest tests/test_accessibility.py -v --tb=short
	@echo "✅ Docker tests completed"
	@echo "View results at http://localhost:8080"

# Run tests in CI/CD mode
test-ci: test-setup
	@echo "Running CI/CD accessibility tests..."
	python -m pytest tests/test_accessibility.py \
		-v --tb=short \
		--html=reports/accessibility-report.html \
		--self-contained-html \
		--junitxml=reports/junit.xml \
		--cov=backend \
		--cov=frontend \
		--cov-report=html:reports/coverage \
		--cov-report=term-missing
	@echo "✅ CI/CD tests completed"

# Generate accessibility report
test-report:
	@echo "Generating accessibility report..."
	@mkdir -p reports
	python -c "
from tests.test_accessibility import run_accessibility_tests
import json

# Run tests and generate report
results = run_accessibility_tests('http://localhost:5000', ['/', '/forms', '/calculator'])
if results.get('success'):
    print('✅ Accessibility report generated')
    print(f'Report saved to: {results.get(\"report_file\", \"unknown\")}')
else:
    print('❌ Failed to generate report')
    print(f'Error: {results.get(\"error\", \"unknown\")}')
"
	@echo "✅ Report generation completed"

# Run tests in watch mode
test-watch: test-setup
	@echo "Running tests in watch mode..."
	python -m pytest tests/test_accessibility.py -v --tb=short -f
	@echo "✅ Watch mode tests completed"

# Clean test artifacts
test-clean:
	@echo "Cleaning test artifacts..."
	rm -rf reports/
	rm -rf .pytest_cache/
	rm -rf __pycache__/
	rm -rf */__pycache__/
	rm -rf */tests/__pycache__/
	rm -rf accessibility_report_*.json
	@echo "✅ Test artifacts cleaned"

# Setup testing environment
test-setup:
	@echo "Setting up testing environment..."
	@mkdir -p reports
	@mkdir -p logs
	@echo "✅ Testing environment ready"

# Run specific test categories
test-wcag:
	@echo "Running WCAG compliance tests..."
	python -m pytest tests/test_accessibility.py::TestAccessibility::test_wcag_compliance -v

test-contrast:
	@echo "Running color contrast tests..."
	python -m pytest tests/test_accessibility.py::TestAccessibility::test_color_contrast_compliance -v

test-keyboard:
	@echo "Running keyboard navigation tests..."
	python -m pytest tests/test_accessibility.py::TestAccessibility::test_keyboard_navigation -v

test-forms:
	@echo "Running form accessibility tests..."
	python -m pytest tests/test_accessibility.py::TestAccessibility::test_financial_forms_accessibility -v

# Performance testing
test-performance:
	@echo "Running performance tests..."
	python -m pytest tests/test_accessibility.py -v --durations=10

# Coverage testing
test-coverage:
	@echo "Running tests with coverage..."
	python -m pytest tests/test_accessibility.py \
		--cov=backend \
		--cov=frontend \
		--cov-report=html:reports/coverage \
		--cov-report=term-missing \
		--cov-fail-under=80

# Docker management
docker-up:
	@echo "Starting Docker testing services..."
	docker-compose -f docker-compose.testing.yml up -d

docker-down:
	@echo "Stopping Docker testing services..."
	docker-compose -f docker-compose.testing.yml down

docker-logs:
	@echo "Showing Docker logs..."
	docker-compose -f docker-compose.testing.yml logs -f

docker-restart:
	@echo "Restarting Docker testing services..."
	docker-compose -f docker-compose.testing.yml restart

# Health checks
health-check:
	@echo "Checking service health..."
	@curl -f http://localhost:5000/health || echo "❌ Flask service not healthy"
	@curl -f http://localhost:3000 || echo "❌ React service not healthy"
	@echo "✅ Health check completed"

# Quick test run
quick-test:
	@echo "Running quick accessibility test..."
	python -c "
from tests.test_accessibility import AccessibilityTester
tester = AccessibilityTester('http://localhost:5000')
try:
    tester.setup_driver()
    results = tester.test_wcag_compliance('Quick Test')
    print(f'Quick test results: {results[\"overall_compliance\"]}')
finally:
    tester.teardown_driver()
"

# Development helpers
dev-setup:
	@echo "Setting up development environment..."
	make -f Makefile.testing install
	make -f Makefile.testing test-setup
	@echo "✅ Development environment ready"

dev-test:
	@echo "Running development tests..."
	make -f Makefile.testing test-local
	make -f Makefile.testing test-report

# CI/CD helpers
ci-setup:
	@echo "Setting up CI/CD environment..."
	pip install -r requirements-testing.txt
	mkdir -p reports logs
	@echo "✅ CI/CD environment ready"

ci-test:
	@echo "Running CI/CD tests..."
	make -f Makefile.testing test-ci
	make -f Makefile.testing test-report
