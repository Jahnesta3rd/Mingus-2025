"""Initial database setup

Revision ID: cdd6e5c35e83
Revises: 
Create Date: 2025-09-01 20:03:49.607453

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cdd6e5c35e83'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_calculator_conversions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('assessment_id', sa.UUID(), nullable=False),
    sa.Column('conversion_type', sa.String(length=50), nullable=False),
    sa.Column('conversion_value', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('converted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('conversion_source', sa.String(length=100), nullable=True),
    sa.Column('conversion_medium', sa.String(length=100), nullable=True),
    sa.Column('conversion_campaign', sa.String(length=100), nullable=True),
    sa.Column('conversion_revenue', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('touchpoints_before_conversion', sa.Integer(), nullable=True),
    sa.Column('days_to_conversion', sa.Integer(), nullable=True),
    sa.Column('conversion_funnel_stage', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("conversion_type IN ('email_signup', 'paid_upgrade', 'consultation_booking', 'course_enrollment')", name='valid_conversion_type'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_calculator_conversions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_calculator_conversions_assessment_id'), ['assessment_id'], unique=False)

    op.create_table('ai_job_assessments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('job_title', sa.String(length=255), nullable=False),
    sa.Column('industry', sa.String(length=100), nullable=False),
    sa.Column('experience_level', sa.String(length=20), nullable=False),
    sa.Column('tasks_array', sa.JSON(), nullable=False),
    sa.Column('remote_work_frequency', sa.String(length=20), nullable=False),
    sa.Column('ai_usage_frequency', sa.String(length=20), nullable=False),
    sa.Column('team_size', sa.String(length=20), nullable=False),
    sa.Column('tech_skills_level', sa.String(length=20), nullable=False),
    sa.Column('concerns_array', sa.JSON(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('automation_score', sa.Integer(), nullable=False),
    sa.Column('augmentation_score', sa.Integer(), nullable=False),
    sa.Column('overall_risk_level', sa.String(length=20), nullable=False),
    sa.Column('assessment_type', sa.String(length=50), nullable=True),
    sa.Column('lead_source', sa.String(length=100), nullable=True),
    sa.Column('utm_source', sa.String(length=100), nullable=True),
    sa.Column('utm_medium', sa.String(length=100), nullable=True),
    sa.Column('utm_campaign', sa.String(length=100), nullable=True),
    sa.Column('utm_term', sa.String(length=100), nullable=True),
    sa.Column('utm_content', sa.String(length=100), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True),
    sa.Column('email_verification_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('communication_preferences', sa.JSON(), nullable=True),
    sa.Column('assessment_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('questions_answered', sa.Integer(), nullable=True),
    sa.Column('total_questions', sa.Integer(), nullable=True),
    sa.Column('completion_percentage', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('mitigation_strategies', sa.JSON(), nullable=True),
    sa.Column('recommended_skills', sa.JSON(), nullable=True),
    sa.Column('career_advice', sa.JSON(), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("ai_usage_frequency IN ('never', 'rarely', 'sometimes', 'often', 'always')", name='valid_ai_usage_frequency'),
    sa.CheckConstraint("experience_level IN ('entry', 'mid', 'senior', 'executive')", name='valid_experience_level'),
    sa.CheckConstraint("overall_risk_level IN ('low', 'medium', 'high')", name='valid_risk_level'),
    sa.CheckConstraint("remote_work_frequency IN ('never', 'rarely', 'sometimes', 'often', 'always')", name='valid_remote_work_frequency'),
    sa.CheckConstraint("team_size IN ('1-5', '6-10', '11-25', '26-50', '50+')", name='valid_team_size'),
    sa.CheckConstraint("tech_skills_level IN ('basic', 'intermediate', 'advanced', 'expert')", name='valid_tech_skills_level'),
    sa.CheckConstraint('augmentation_score >= 0 AND augmentation_score <= 100', name='valid_augmentation_score'),
    sa.CheckConstraint('automation_score >= 0 AND automation_score <= 100', name='valid_automation_score'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_job_assessments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_job_assessments_email'), ['email'], unique=False)

    op.create_table('ai_job_risk_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_keyword', sa.String(length=100), nullable=False),
    sa.Column('automation_base_score', sa.Integer(), nullable=False),
    sa.Column('augmentation_base_score', sa.Integer(), nullable=False),
    sa.Column('risk_category', sa.String(length=20), nullable=False),
    sa.Column('industry_modifiers', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("risk_category IN ('low', 'medium', 'high')", name='valid_risk_category'),
    sa.CheckConstraint('augmentation_base_score >= 0 AND augmentation_base_score <= 100', name='valid_augmentation_base_score'),
    sa.CheckConstraint('automation_base_score >= 0 AND automation_base_score <= 100', name='valid_automation_base_score'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_job_risk_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_job_risk_data_job_keyword'), ['job_keyword'], unique=True)

    op.create_table('articles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_preview', sa.String(length=500), nullable=True),
    sa.Column('meta_description', sa.Text(), nullable=True),
    sa.Column('author', sa.String(length=200), nullable=True),
    sa.Column('publish_date', sa.Date(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('reading_time_minutes', sa.Integer(), nullable=True),
    sa.Column('primary_phase', sa.Enum('BE', 'DO', 'HAVE', name='phase_enum'), nullable=False),
    sa.Column('difficulty_level', sa.Enum('Beginner', 'Intermediate', 'Advanced', name='difficulty_enum'), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('demographic_relevance', sa.Integer(), nullable=True),
    sa.Column('cultural_sensitivity', sa.Integer(), nullable=True),
    sa.Column('income_impact_potential', sa.Integer(), nullable=True),
    sa.Column('actionability_score', sa.Integer(), nullable=True),
    sa.Column('professional_development_value', sa.Integer(), nullable=True),
    sa.Column('key_topics', sa.JSON(), nullable=True),
    sa.Column('learning_objectives', sa.JSON(), nullable=True),
    sa.Column('prerequisites', sa.JSON(), nullable=True),
    sa.Column('cultural_relevance_keywords', sa.JSON(), nullable=True),
    sa.Column('target_income_range', sa.String(length=50), nullable=True),
    sa.Column('career_stage', sa.String(length=50), nullable=True),
    sa.Column('recommended_reading_order', sa.Integer(), nullable=True),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('domain', sa.String(length=100), nullable=False),
    sa.Column('source_quality_score', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_articles_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_demographic_relevance'), ['demographic_relevance'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_difficulty_level'), ['difficulty_level'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_domain'), ['domain'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_is_featured'), ['is_featured'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_primary_phase'), ['primary_phase'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_publish_date'), ['publish_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_search_vector'), ['search_vector'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_title'), ['title'], unique=False)
        batch_op.create_index(batch_op.f('ix_articles_url'), ['url'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('phone_number', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('encrypted_monthly_income', sa.Text(), nullable=True),
    sa.Column('encrypted_income_frequency', sa.Text(), nullable=True),
    sa.Column('encrypted_primary_income_source', sa.Text(), nullable=True),
    sa.Column('encrypted_secondary_income_source', sa.Text(), nullable=True),
    sa.Column('encrypted_current_savings', sa.Text(), nullable=True),
    sa.Column('encrypted_current_debt', sa.Text(), nullable=True),
    sa.Column('encrypted_emergency_fund', sa.Text(), nullable=True),
    sa.Column('encrypted_savings_goal', sa.Text(), nullable=True),
    sa.Column('encrypted_debt_payoff_goal', sa.Text(), nullable=True),
    sa.Column('encrypted_investment_goal', sa.Text(), nullable=True),
    sa.Column('encrypted_ssn', sa.Text(), nullable=True),
    sa.Column('encrypted_tax_id', sa.Text(), nullable=True),
    sa.Column('encrypted_passport_number', sa.Text(), nullable=True),
    sa.Column('encrypted_drivers_license', sa.Text(), nullable=True),
    sa.Column('encrypted_address', sa.Text(), nullable=True),
    sa.Column('encrypted_birth_date', sa.Text(), nullable=True),
    sa.Column('monthly_income', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('income_frequency', sa.String(length=50), nullable=True),
    sa.Column('primary_income_source', sa.String(length=100), nullable=True),
    sa.Column('secondary_income_source', sa.String(length=100), nullable=True),
    sa.Column('current_savings', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('current_debt', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('emergency_fund', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('savings_goal', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('debt_payoff_goal', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('investment_goal', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('risk_tolerance', sa.String(length=50), nullable=True),
    sa.Column('investment_experience', sa.String(length=50), nullable=True),
    sa.Column('budgeting_experience', sa.String(length=50), nullable=True),
    sa.Column('encryption_version', sa.String(length=10), nullable=True),
    sa.Column('last_encryption_update', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('ai_onboarding_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('ai_assessment_introduced', sa.Boolean(), nullable=True),
    sa.Column('ai_assessment_started', sa.Boolean(), nullable=True),
    sa.Column('ai_assessment_completed', sa.Boolean(), nullable=True),
    sa.Column('ai_insights_explained', sa.Boolean(), nullable=True),
    sa.Column('ai_career_plan_created', sa.Boolean(), nullable=True),
    sa.Column('introduction_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('insights_explained_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('career_plan_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_opted_in', sa.Boolean(), nullable=True),
    sa.Column('skip_reason', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_onboarding_progress', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_onboarding_progress_user_id'), ['user_id'], unique=False)

    op.create_table('ai_user_profile_extensions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('latest_ai_assessment_id', sa.UUID(), nullable=True),
    sa.Column('overall_risk_level', sa.String(length=20), nullable=True),
    sa.Column('automation_score', sa.Integer(), nullable=True),
    sa.Column('augmentation_score', sa.Integer(), nullable=True),
    sa.Column('career_risk_alerts_enabled', sa.Boolean(), nullable=True),
    sa.Column('ai_skill_development_goals', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('career_transition_plans', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('risk_mitigation_strategies', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('ai_career_insights_enabled', sa.Boolean(), nullable=True),
    sa.Column('industry_risk_monitoring', sa.Boolean(), nullable=True),
    sa.Column('skill_gap_analysis_enabled', sa.Boolean(), nullable=True),
    sa.Column('career_advancement_tracking', sa.Boolean(), nullable=True),
    sa.Column('ai_assessment_completed', sa.Boolean(), nullable=True),
    sa.Column('ai_assessment_completion_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ai_onboarding_step', sa.String(length=50), nullable=True),
    sa.Column('ai_career_email_frequency', sa.String(length=20), nullable=True),
    sa.Column('ai_career_sms_enabled', sa.Boolean(), nullable=True),
    sa.Column('ai_career_push_notifications', sa.Boolean(), nullable=True),
    sa.Column('ai_assessment_count', sa.Integer(), nullable=True),
    sa.Column('last_ai_assessment_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ai_career_insights_engagement_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['latest_ai_assessment_id'], ['ai_job_assessments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_user_profile_extensions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_user_profile_extensions_user_id'), ['user_id'], unique=True)

    op.create_table('article_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('total_views', sa.Integer(), nullable=True),
    sa.Column('total_reads', sa.Integer(), nullable=True),
    sa.Column('total_bookmarks', sa.Integer(), nullable=True),
    sa.Column('total_shares', sa.Integer(), nullable=True),
    sa.Column('completion_rate', sa.Float(), nullable=True),
    sa.Column('average_time_spent', sa.Float(), nullable=True),
    sa.Column('average_scroll_depth', sa.Float(), nullable=True),
    sa.Column('average_rating', sa.Float(), nullable=True),
    sa.Column('total_ratings', sa.Integer(), nullable=True),
    sa.Column('helpfulness_score', sa.Float(), nullable=True),
    sa.Column('clarity_score', sa.Float(), nullable=True),
    sa.Column('actionability_score', sa.Float(), nullable=True),
    sa.Column('cultural_relevance_score', sa.Float(), nullable=True),
    sa.Column('recommendation_click_rate', sa.Float(), nullable=True),
    sa.Column('recommendation_read_rate', sa.Float(), nullable=True),
    sa.Column('demographic_breakdown', sa.JSON(), nullable=True),
    sa.Column('phase_effectiveness', sa.JSON(), nullable=True),
    sa.Column('daily_views', sa.JSON(), nullable=True),
    sa.Column('weekly_engagement', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('article_analytics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_article_analytics_article_id'), ['article_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_article_analytics_average_rating'), ['average_rating'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_analytics_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_analytics_total_reads'), ['total_reads'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_analytics_total_views'), ['total_views'], unique=False)

    op.create_table('article_recommendations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('recommendation_score', sa.Float(), nullable=False),
    sa.Column('recommendation_reason', sa.String(length=200), nullable=True),
    sa.Column('recommendation_source', sa.String(length=100), nullable=True),
    sa.Column('user_income_match', sa.Float(), nullable=True),
    sa.Column('user_career_match', sa.Float(), nullable=True),
    sa.Column('user_goals_match', sa.Float(), nullable=True),
    sa.Column('cultural_relevance_match', sa.Float(), nullable=True),
    sa.Column('is_displayed', sa.Boolean(), nullable=True),
    sa.Column('is_clicked', sa.Boolean(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('display_position', sa.Integer(), nullable=True),
    sa.Column('recommended_at', sa.DateTime(), nullable=True),
    sa.Column('displayed_at', sa.DateTime(), nullable=True),
    sa.Column('clicked_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('article_recommendations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_article_recommendations_article_id'), ['article_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_recommendations_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_recommendations_recommended_at'), ['recommended_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_recommendations_user_id'), ['user_id'], unique=False)

    op.create_table('article_searches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('search_query', sa.String(length=500), nullable=True),
    sa.Column('search_filters', sa.JSON(), nullable=True),
    sa.Column('results_count', sa.Integer(), nullable=True),
    sa.Column('search_time_ms', sa.Integer(), nullable=True),
    sa.Column('search_success', sa.Boolean(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('clicked_article_id', sa.UUID(), nullable=True),
    sa.Column('clicked_position', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clicked_article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('article_searches', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_article_searches_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_article_searches_user_id'), ['user_id'], unique=False)

    op.create_table('health_spending_correlations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('analysis_period', sa.String(length=50), nullable=False),
    sa.Column('analysis_start_date', sa.DateTime(), nullable=False),
    sa.Column('analysis_end_date', sa.DateTime(), nullable=False),
    sa.Column('health_metric', sa.String(length=100), nullable=False),
    sa.Column('spending_category', sa.String(length=100), nullable=False),
    sa.Column('correlation_strength', sa.Float(), nullable=False),
    sa.Column('correlation_direction', sa.String(length=20), nullable=False),
    sa.Column('sample_size', sa.Integer(), nullable=False),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('confidence_interval_lower', sa.Float(), nullable=True),
    sa.Column('confidence_interval_upper', sa.Float(), nullable=True),
    sa.Column('insight_text', sa.String(length=1000), nullable=True),
    sa.Column('recommendation_text', sa.String(length=1000), nullable=True),
    sa.Column('actionable_insight', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('health_spending_correlations', schema=None) as batch_op:
        batch_op.create_index('idx_actionable_insights', ['actionable_insight', 'correlation_strength'], unique=False)
        batch_op.create_index('idx_analysis_date_range', ['analysis_start_date', 'analysis_end_date'], unique=False)
        batch_op.create_index('idx_correlation_strength', ['correlation_strength'], unique=False)
        batch_op.create_index('idx_user_period_metric', ['user_id', 'analysis_period', 'health_metric', 'spending_category'], unique=False)
        batch_op.create_index(batch_op.f('ix_health_spending_correlations_user_id'), ['user_id'], unique=False)

    op.create_table('onboarding_progress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('current_step', sa.String(length=100), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=True),
    sa.Column('completed_steps', sa.Integer(), nullable=True),
    sa.Column('step_status', sa.String(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completion_percentage', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_article_bookmarks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('folder_name', sa.String(length=100), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'article_id', name='uq_user_article_bookmark')
    )
    with op.batch_alter_table('user_article_bookmarks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_article_bookmarks_article_id'), ['article_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_bookmarks_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_bookmarks_user_id'), ['user_id'], unique=False)

    op.create_table('user_article_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('current_phase', sa.Enum('BE', 'DO', 'HAVE', name='user_phase_enum'), nullable=False),
    sa.Column('phase_progress', sa.Float(), nullable=True),
    sa.Column('total_progress', sa.Float(), nullable=True),
    sa.Column('learning_objectives_achieved', sa.JSON(), nullable=True),
    sa.Column('skills_developed', sa.JSON(), nullable=True),
    sa.Column('actions_taken', sa.JSON(), nullable=True),
    sa.Column('self_assessment_score', sa.Integer(), nullable=True),
    sa.Column('confidence_increase', sa.Float(), nullable=True),
    sa.Column('knowledge_retention_score', sa.Float(), nullable=True),
    sa.Column('next_recommended_article_id', sa.UUID(), nullable=True),
    sa.Column('next_phase_target', sa.Enum('BE', 'DO', 'HAVE', name='next_phase_enum'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['next_recommended_article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'article_id', name='uq_user_article_progress')
    )
    with op.batch_alter_table('user_article_progress', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_article_progress_article_id'), ['article_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_progress_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_progress_current_phase'), ['current_phase'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_progress_user_id'), ['user_id'], unique=False)

    op.create_table('user_article_ratings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('overall_rating', sa.Integer(), nullable=False),
    sa.Column('helpfulness_rating', sa.Integer(), nullable=True),
    sa.Column('clarity_rating', sa.Integer(), nullable=True),
    sa.Column('actionability_rating', sa.Integer(), nullable=True),
    sa.Column('cultural_relevance_rating', sa.Integer(), nullable=True),
    sa.Column('review_text', sa.Text(), nullable=True),
    sa.Column('review_title', sa.String(length=200), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('is_anonymous', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'article_id', name='uq_user_article_rating')
    )
    with op.batch_alter_table('user_article_ratings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_article_ratings_article_id'), ['article_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_ratings_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_ratings_user_id'), ['user_id'], unique=False)

    op.create_table('user_article_reads',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('time_spent_seconds', sa.Integer(), nullable=True),
    sa.Column('scroll_depth_percentage', sa.Float(), nullable=True),
    sa.Column('engagement_score', sa.Float(), nullable=True),
    sa.Column('found_helpful', sa.Boolean(), nullable=True),
    sa.Column('would_recommend', sa.Boolean(), nullable=True),
    sa.Column('difficulty_rating', sa.Integer(), nullable=True),
    sa.Column('relevance_rating', sa.Integer(), nullable=True),
    sa.Column('reading_session_id', sa.String(length=100), nullable=True),
    sa.Column('source_page', sa.String(length=200), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'article_id', name='uq_user_article_read')
    )
    with op.batch_alter_table('user_article_reads', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_article_reads_article_id'), ['article_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_reads_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_article_reads_user_id'), ['user_id'], unique=False)

    op.create_table('user_assessment_scores',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('be_score', sa.Integer(), nullable=True),
    sa.Column('do_score', sa.Integer(), nullable=True),
    sa.Column('have_score', sa.Integer(), nullable=True),
    sa.Column('assessment_date', sa.DateTime(), nullable=True),
    sa.Column('assessment_version', sa.String(length=50), nullable=True),
    sa.Column('total_questions', sa.Integer(), nullable=True),
    sa.Column('completion_time_minutes', sa.Integer(), nullable=True),
    sa.Column('be_level', sa.String(length=20), nullable=True),
    sa.Column('do_level', sa.String(length=20), nullable=True),
    sa.Column('have_level', sa.String(length=20), nullable=True),
    sa.Column('overall_readiness_level', sa.String(length=20), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_assessment_scores', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_assessment_scores_assessment_date'), ['assessment_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_assessment_scores_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_assessment_scores_user_id'), ['user_id'], unique=True)

    op.create_table('user_health_checkins',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('checkin_date', sa.DateTime(), nullable=False),
    sa.Column('sleep_hours', sa.Float(), nullable=True),
    sa.Column('physical_activity_minutes', sa.Integer(), nullable=True),
    sa.Column('physical_activity_level', sa.String(length=50), nullable=True),
    sa.Column('relationships_rating', sa.Integer(), nullable=True),
    sa.Column('relationships_notes', sa.String(length=500), nullable=True),
    sa.Column('mindfulness_minutes', sa.Integer(), nullable=True),
    sa.Column('mindfulness_type', sa.String(length=100), nullable=True),
    sa.Column('stress_level', sa.Integer(), nullable=True),
    sa.Column('energy_level', sa.Integer(), nullable=True),
    sa.Column('mood_rating', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'checkin_date', name='uq_user_weekly_checkin')
    )
    with op.batch_alter_table('user_health_checkins', schema=None) as batch_op:
        batch_op.create_index('idx_health_metrics', ['stress_level', 'energy_level', 'mood_rating'], unique=False)
        batch_op.create_index('idx_user_health_checkin_date_range', ['user_id', 'checkin_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_health_checkins_checkin_date'), ['checkin_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_health_checkins_user_id'), ['user_id'], unique=False)

    op.create_table('user_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('monthly_income', sa.Float(), nullable=True),
    sa.Column('income_frequency', sa.String(length=50), nullable=True),
    sa.Column('primary_income_source', sa.String(length=100), nullable=True),
    sa.Column('secondary_income_source', sa.String(length=100), nullable=True),
    sa.Column('primary_goal', sa.String(length=100), nullable=True),
    sa.Column('goal_amount', sa.Float(), nullable=True),
    sa.Column('goal_timeline_months', sa.Integer(), nullable=True),
    sa.Column('age_range', sa.String(length=50), nullable=True),
    sa.Column('location_state', sa.String(length=50), nullable=True),
    sa.Column('location_city', sa.String(length=100), nullable=True),
    sa.Column('household_size', sa.Integer(), nullable=True),
    sa.Column('employment_status', sa.String(length=50), nullable=True),
    sa.Column('current_savings', sa.Float(), nullable=True),
    sa.Column('current_debt', sa.Float(), nullable=True),
    sa.Column('credit_score_range', sa.String(length=50), nullable=True),
    sa.Column('risk_tolerance', sa.String(length=50), nullable=True),
    sa.Column('investment_experience', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_profiles')
    with op.batch_alter_table('user_health_checkins', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_health_checkins_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_health_checkins_checkin_date'))
        batch_op.drop_index('idx_user_health_checkin_date_range')
        batch_op.drop_index('idx_health_metrics')

    op.drop_table('user_health_checkins')
    with op.batch_alter_table('user_assessment_scores', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_assessment_scores_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_assessment_scores_created_at'))
        batch_op.drop_index(batch_op.f('ix_user_assessment_scores_assessment_date'))

    op.drop_table('user_assessment_scores')
    with op.batch_alter_table('user_article_reads', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_article_reads_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_article_reads_created_at'))
        batch_op.drop_index(batch_op.f('ix_user_article_reads_article_id'))

    op.drop_table('user_article_reads')
    with op.batch_alter_table('user_article_ratings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_article_ratings_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_article_ratings_created_at'))
        batch_op.drop_index(batch_op.f('ix_user_article_ratings_article_id'))

    op.drop_table('user_article_ratings')
    with op.batch_alter_table('user_article_progress', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_article_progress_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_article_progress_current_phase'))
        batch_op.drop_index(batch_op.f('ix_user_article_progress_created_at'))
        batch_op.drop_index(batch_op.f('ix_user_article_progress_article_id'))

    op.drop_table('user_article_progress')
    with op.batch_alter_table('user_article_bookmarks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_article_bookmarks_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_article_bookmarks_created_at'))
        batch_op.drop_index(batch_op.f('ix_user_article_bookmarks_article_id'))

    op.drop_table('user_article_bookmarks')
    op.drop_table('onboarding_progress')
    with op.batch_alter_table('health_spending_correlations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_health_spending_correlations_user_id'))
        batch_op.drop_index('idx_user_period_metric')
        batch_op.drop_index('idx_correlation_strength')
        batch_op.drop_index('idx_analysis_date_range')
        batch_op.drop_index('idx_actionable_insights')

    op.drop_table('health_spending_correlations')
    with op.batch_alter_table('article_searches', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_article_searches_user_id'))
        batch_op.drop_index(batch_op.f('ix_article_searches_created_at'))

    op.drop_table('article_searches')
    with op.batch_alter_table('article_recommendations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_article_recommendations_user_id'))
        batch_op.drop_index(batch_op.f('ix_article_recommendations_recommended_at'))
        batch_op.drop_index(batch_op.f('ix_article_recommendations_created_at'))
        batch_op.drop_index(batch_op.f('ix_article_recommendations_article_id'))

    op.drop_table('article_recommendations')
    with op.batch_alter_table('article_analytics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_article_analytics_total_views'))
        batch_op.drop_index(batch_op.f('ix_article_analytics_total_reads'))
        batch_op.drop_index(batch_op.f('ix_article_analytics_created_at'))
        batch_op.drop_index(batch_op.f('ix_article_analytics_average_rating'))
        batch_op.drop_index(batch_op.f('ix_article_analytics_article_id'))

    op.drop_table('article_analytics')
    with op.batch_alter_table('ai_user_profile_extensions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_user_profile_extensions_user_id'))

    op.drop_table('ai_user_profile_extensions')
    with op.batch_alter_table('ai_onboarding_progress', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_onboarding_progress_user_id'))

    op.drop_table('ai_onboarding_progress')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_articles_url'))
        batch_op.drop_index(batch_op.f('ix_articles_title'))
        batch_op.drop_index(batch_op.f('ix_articles_search_vector'))
        batch_op.drop_index(batch_op.f('ix_articles_publish_date'))
        batch_op.drop_index(batch_op.f('ix_articles_primary_phase'))
        batch_op.drop_index(batch_op.f('ix_articles_is_featured'))
        batch_op.drop_index(batch_op.f('ix_articles_is_active'))
        batch_op.drop_index(batch_op.f('ix_articles_domain'))
        batch_op.drop_index(batch_op.f('ix_articles_difficulty_level'))
        batch_op.drop_index(batch_op.f('ix_articles_demographic_relevance'))
        batch_op.drop_index(batch_op.f('ix_articles_created_at'))

    op.drop_table('articles')
    with op.batch_alter_table('ai_job_risk_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_job_risk_data_job_keyword'))

    op.drop_table('ai_job_risk_data')
    with op.batch_alter_table('ai_job_assessments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_job_assessments_email'))

    op.drop_table('ai_job_assessments')
    with op.batch_alter_table('ai_calculator_conversions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_calculator_conversions_assessment_id'))

    op.drop_table('ai_calculator_conversions')
    # ### end Alembic commands ### 