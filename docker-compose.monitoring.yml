version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mingus_postgres
    environment:
      POSTGRES_DB: mingus_financial
      POSTGRES_USER: mingus_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - monitoring_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mingus_user -d mingus_financial"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mingus_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - monitoring_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mingus_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.3
    container_name: mingus_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: mingus_node_exporter
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.udev.data=/host/run/udev/data'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.filesystem.fs-types-exclude=^(sys|proc|auto)fs$$'
      - '--collector.netdev.device-exclude=^(lo|docker0|veth.*)$$'
    volumes:
      - /:/host:ro,rslave
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /run/udev:/host/run/udev:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring_network
    restart: unless-stopped

  # Redis Exporter for Redis metrics
  redis_exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: mingus_redis_exporter
    command:
      - '--redis.addr=redis://redis:6379'
      - '--redis.password='
      - '--web.listen-address=:9121'
    ports:
      - "9121:9121"
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  # PostgreSQL Exporter for database metrics
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.14.0
    container_name: mingus_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://mingus_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mingus_financial?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Alert Manager for notifications
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: mingus_alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.console.libraries=/etc/alertmanager/console_libraries'
      - '--web.console.templates=/etc/alertmanager/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring_network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: mingus_cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring_network
    restart: unless-stopped

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: mingus_jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_JAEGER_DISABLED: false
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
    networks:
      - monitoring_network
    restart: unless-stopped

  # Elasticsearch for log aggregation (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: mingus_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - monitoring_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: mingus_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Filebeat for log collection (optional)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: mingus_filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/mingus:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring_network
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
