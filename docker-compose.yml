# =====================================================
# Mingus Meme Splash Page - Docker Compose Configuration
# Local development and production deployment
# =====================================================

version: '3.8'

services:
  # Main Flask application
  mingus-meme-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mingus-meme-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/mingus_memes.db}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-/app/static/uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_REGION=${AWS_S3_REGION:-us-east-1}
      - CDN_URL=${CDN_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
      - ./database_backups:/app/database_backups
      - ./mingus_memes.db:/app/mingus_memes.db
    depends_on:
      - redis
      - postgres
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for production)
  postgres:
    image: postgres:15-alpine
    container_name: mingus-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mingus_memes}
      - POSTGRES_USER=${POSTGRES_USER:-mingus}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_backups:/backups
    ports:
      - "5432:5432"
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mingus}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mingus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: mingus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - mingus-meme-app
    networks:
      - mingus-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Meme Analytics Dashboard (optional)
  meme-analytics:
    build:
      context: .
      dockerfile: Dockerfile.analytics
    container_name: mingus-analytics
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/mingus_memes.db}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - mingus-network
    profiles:
      - analytics

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mingus-network:
    driver: bridge
