version: '3.8'

services:
  # Main Flask Application with Article Library
  mingus-app:
    build:
      context: .
      dockerfile: Dockerfile.article-library
    container_name: mingus-article-library-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=backend.app:create_app()
      - DATABASE_URL=postgresql://mingus_user:${DB_PASSWORD}@postgres:5432/mingus_production
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAC_EMAIL_ADDRESS=${MAC_EMAIL_ADDRESS}
      - MAC_EMAIL_APP_PASSWORD=${MAC_EMAIL_APP_PASSWORD}
      - ENABLE_ARTICLE_LIBRARY=true
      - ENABLE_AI_RECOMMENDATIONS=true
      - ENABLE_CULTURAL_PERSONALIZATION=true
      - ENABLE_ADVANCED_SEARCH=true
      - ENABLE_SOCIAL_SHARING=true
      - ENABLE_ARTICLE_ANALYTICS=true
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CACHE_TYPE=redis
      - CACHE_REDIS_URL=redis://redis:6379/2
      - RATE_LIMIT_STORAGE_URL=redis://redis:6379/3
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./static:/app/static
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Article Processing
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.article-library
    container_name: mingus-article-library-worker
    command: celery -A backend.tasks.article_tasks worker --loglevel=info --concurrency=4 --queues=articles,default
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mingus_user:${DB_PASSWORD}@postgres:5432/mingus_production
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAC_EMAIL_ADDRESS=${MAC_EMAIL_ADDRESS}
      - MAC_EMAIL_APP_PASSWORD=${MAC_EMAIL_APP_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - mingus-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.article-library
    container_name: mingus-article-library-beat
    command: celery -A backend.tasks.article_tasks beat --loglevel=info --scheduler=celery.beat.PersistentScheduler
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mingus_user:${DB_PASSWORD}@postgres:5432/mingus_production
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - mingus-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mingus-article-library-db
    environment:
      - POSTGRES_DB=mingus_production
      - POSTGRES_USER=mingus_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mingus_user -d mingus_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Message Broker
  redis:
    image: redis:7-alpine
    container_name: mingus-article-library-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Advanced Search (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mingus-article-library-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mingus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mingus-article-library-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - mingus-app
    networks:
      - mingus-network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.article-library
    container_name: mingus-article-library-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5000/api
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_ENABLE_AI_RECOMMENDATIONS=true
      - REACT_APP_ENABLE_CULTURAL_PERSONALIZATION=true
      - REACT_APP_ENABLE_ADVANCED_SEARCH=true
      - REACT_APP_ENABLE_SOCIAL_SHARING=true
      - REACT_APP_ENABLE_ARTICLE_ANALYTICS=true
    depends_on:
      - mingus-app
    networks:
      - mingus-network
    restart: unless-stopped

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: mingus-article-library-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mingus-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mingus-article-library-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mingus-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mingus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
