// Simple Puppeteer test
const puppeteer = require('puppeteer')

console.log('üîç Testing Puppeteer Installation...')
console.log('================================')

async function testPuppeteer() {
  let browser = null
  
  try {
    console.log('üöÄ Launching browser...')
    browser = await puppeteer.launch({
      headless: 'new',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage'
      ]
    })
    
    console.log('‚úÖ Browser launched successfully')
    
    console.log('üìÑ Creating new page...')
    const page = await browser.newPage()
    
    console.log('‚úÖ Page created successfully')
    
    // Test basic HTML to PDF conversion
    console.log('üñ®Ô∏è  Testing PDF generation...')
    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Test PDF</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #dc2626; }
          </style>
        </head>
        <body>
          <h1>Ratchet Money Test Report</h1>
          <p>This is a test PDF generated by Puppeteer.</p>
          <p>Assessment Score: 25/50</p>
          <p>Segment: Balanced</p>
          <p>Generated: ${new Date().toLocaleString()}</p>
        </body>
      </html>
    `
    
    await page.setContent(html, { waitUntil: 'networkidle0' })
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: true
    })
    
    console.log('‚úÖ PDF generated successfully')
    console.log(`   Buffer size: ${pdfBuffer.length} bytes`)
    console.log(`   File size: ${(pdfBuffer.length / 1024).toFixed(2)} KB`)
    
    // Save test PDF
    const fs = require('fs').promises
    const path = require('path')
    
    const testDir = path.join(process.cwd(), 'test-output')
    const testFilePath = path.join(testDir, 'test-report.pdf')
    
    await fs.mkdir(testDir, { recursive: true })
    await fs.writeFile(testFilePath, pdfBuffer)
    
    console.log('‚úÖ Test PDF saved successfully')
    console.log(`   File path: ${testFilePath}`)
    
    // Test more complex HTML
    console.log('üé® Testing complex HTML...')
    const complexHtml = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Complex Test PDF</title>
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
            body { 
              font-family: 'Inter', sans-serif; 
              margin: 0; 
              padding: 40px; 
              background: #f9fafb;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              background: white;
              padding: 40px;
              border-radius: 12px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              padding-bottom: 20px;
              border-bottom: 3px solid #dc2626;
            }
            .logo {
              font-size: 24px;
              font-weight: 600;
              color: #dc2626;
              margin-bottom: 10px;
            }
            .score {
              background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
              color: white;
              padding: 20px;
              border-radius: 8px;
              text-align: center;
              margin: 20px 0;
            }
            .score-number {
              font-size: 36px;
              font-weight: 600;
              margin-bottom: 10px;
            }
            .recommendations {
              background: #f0fdf4;
              padding: 20px;
              border-radius: 8px;
              border-left: 4px solid #16a34a;
            }
            .recommendations h3 {
              color: #166534;
              margin-bottom: 15px;
            }
            .recommendations ul {
              margin: 0;
              padding-left: 20px;
            }
            .recommendations li {
              margin-bottom: 8px;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <div class="logo">Ratchet Money</div>
              <div>Your Personalized Assessment Report</div>
            </div>
            
            <h2>Assessment Results</h2>
            <p>Name: Test User</p>
            <p>Date: ${new Date().toLocaleDateString()}</p>
            
            <div class="score">
              <div class="score-number">25</div>
              <div>out of 50</div>
              <div style="margin-top: 10px; font-size: 18px;">Balanced Segment</div>
            </div>
            
            <h3>Your Key Areas</h3>
            <ul>
              <li>Financial Communication</li>
              <li>Emotional Spending</li>
              <li>Financial Planning</li>
            </ul>
            
            <div class="recommendations">
              <h3>Personalized Recommendations</h3>
              <ul>
                <li>Set clearer boundaries around money conversations</li>
                <li>Create a shared financial vision with loved ones</li>
                <li>Develop emergency fund strategies</li>
                <li>Practice mindful spending habits</li>
              </ul>
            </div>
            
            <p style="margin-top: 30px; text-align: center; color: #6b7280;">
              This report was generated on ${new Date().toLocaleString()}
            </p>
          </div>
        </body>
      </html>
    `
    
    await page.setContent(complexHtml, { waitUntil: 'networkidle0' })
    
    const complexPdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '15mm',
        right: '15mm',
        bottom: '15mm',
        left: '15mm'
      },
      printBackground: true
    })
    
    const complexFilePath = path.join(testDir, 'complex-test-report.pdf')
    await fs.writeFile(complexFilePath, complexPdfBuffer)
    
    console.log('‚úÖ Complex PDF generated successfully')
    console.log(`   File size: ${(complexPdfBuffer.length / 1024).toFixed(2)} KB`)
    console.log(`   File path: ${complexFilePath}`)
    
    console.log('\nüéâ Puppeteer test completed successfully!')
    console.log('================================')
    console.log('‚úÖ Browser launch: Working')
    console.log('‚úÖ Page creation: Working')
    console.log('‚úÖ Basic PDF generation: Working')
    console.log('‚úÖ Complex HTML rendering: Working')
    console.log('‚úÖ File saving: Working')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message)
    return false
  } finally {
    if (browser) {
      console.log('üîí Closing browser...')
      await browser.close()
      console.log('‚úÖ Browser closed successfully')
    }
  }
}

// Run the test
testPuppeteer()
  .then(success => {
    if (success) {
      console.log('\nüöÄ Puppeteer is ready for PDF generation!')
      console.log('\nüìÅ Check the test-output/ directory for generated PDFs')
    } else {
      console.log('\n‚ö†Ô∏è  Puppeteer needs attention.')
      process.exit(1)
    }
  })
  .catch(error => {
    console.error('üí• Unexpected error:', error)
    process.exit(1)
  }) 