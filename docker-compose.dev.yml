version: '3.8'

services:
  web:
    build: .
    container_name: mingus-web-dev
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - DATABASE_URL=postgresql://mingus:password@db:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-proj-your-openai-key-here}
      - ENABLE_ARTICLE_LIBRARY=true
      - ENABLE_AI_RECOMMENDATIONS=true
      - ENABLE_CULTURAL_PERSONALIZATION=true
      - ENABLE_ADVANCED_SEARCH=true
      - ENABLE_ANALYTICS=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - CACHE_TYPE=redis
      - CACHE_DEFAULT_TIMEOUT=300
      - RATE_LIMIT_STORAGE_URL=redis://redis:6379/1
      - DEFAULT_RATE_LIMIT=1000/hour
      - SEARCH_RATE_LIMIT=100/minute
      - API_RATE_LIMIT=5000/hour
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    networks:
      - mingus-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c '
        import time
        import psycopg2
        while True:
          try:
            conn = psycopg2.connect(
              host=\"db\",
              port=5432,
              database=\"mingus\",
              user=\"mingus\",
              password=\"password\"
            )
            conn.close()
            print(\"Database is ready!\")
            break
          except psycopg2.OperationalError:
            print(\"Database not ready, waiting...\")
            time.sleep(2)
        ' &&
        echo 'Running database migrations...' &&
        flask db upgrade || echo 'No migrations to run' &&
        echo 'Initializing article library...' &&
        python -c '
        from backend.models.articles import Base as ArticleBase
        from backend.models import engine
        try:
          ArticleBase.metadata.create_all(bind=engine)
          print(\"Article library tables created/verified\")
        except Exception as e:
          print(f\"Article library initialization: {e}\")
        ' &&
        echo 'Starting Flask development server...' &&
        flask run --host=0.0.0.0 --port=5000 --reload
      "
    
  db:
    image: postgres:15-alpine
    container_name: mingus-db-dev
    environment:
      POSTGRES_DB: mingus
      POSTGRES_USER: mingus
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db-dev.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mingus-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mingus -d mingus"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:7-alpine
    container_name: mingus-redis-dev
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mingus-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery:
    build: .
    container_name: mingus-celery-dev
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=2
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - DATABASE_URL=postgresql://mingus:password@db:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-proj-your-openai-key-here}
      - ENABLE_ARTICLE_LIBRARY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - mingus-dev-network

  celery-beat:
    build: .
    container_name: mingus-celery-beat-dev
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - DATABASE_URL=postgresql://mingus:password@db:5432/mingus
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-proj-your-openai-key-here}
      - ENABLE_ARTICLE_LIBRARY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - mingus-dev-network

  flower:
    build: .
    container_name: mingus-flower-dev
    command: celery -A backend.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - mingus-dev-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mingus-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mingus-dev-network
    profiles:
      - search

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  mingus-dev-network:
    driver: bridge
